[{"path":"https://nlmixr2.github.io/dparser-R/Readme.html","id":"differences-between-the-r-dparser-port-and-the-c-version-of-dparser","dir":"","previous_headings":"","what":"Differences between the R dparser port and the C-version of dparser","title":"NA","text":"differences R dparser port standard dparser: R version uses R memory managment instead C’s memory managment .e. malloc R version never called command line, command line interface removed arg.c R version doesn’t exit command (killing R), errors R. outputs using R’s output interface instead printing stdout, stderr. convience functions added translate (maybe parse) grammers within R. currently fixes un-sanitized behaviors upstream dparser Currently isn’t interface use binary grammars","code":""},{"path":"https://nlmixr2.github.io/dparser-R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Fidler. Author, maintainer. John Plevyak. Author, copyright holder.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fidler M, Plevyak J (2024). dparser: Port 'Dparser' Package. R package version 1.3.1-12, https://github.com/nlmixr2/dparser-R/, https://nlmixr2.github.io/dparser-R/.","code":"@Manual{,   title = {dparser: Port of 'Dparser' Package},   author = {Matthew Fidler and John Plevyak},   year = {2024},   note = {R package version 1.3.1-12,     https://github.com/nlmixr2/dparser-R/},   url = {https://nlmixr2.github.io/dparser-R/}, }"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dot-dparsePtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the dparser function pointers — .dparsePtr","title":"Return the dparser function pointers — .dparsePtr","text":"Return dparser function pointers","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dot-dparsePtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the dparser function pointers — .dparsePtr","text":"","code":".dparsePtr()"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dot-dparsePtr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the dparser function pointers — .dparsePtr","text":"dparser function pointers","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dot-dparsePtr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the dparser function pointers — .dparsePtr","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dot-dparsePtr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the dparser function pointers — .dparsePtr","text":"","code":".dparsePtr() #> $dparse___freeP #> <pointer: 0x7f4bf173d180> #>  #> $dparse_dparse_sexp #> <pointer: 0x7f4bf173d200> #>  #> $dparse_set_d_file_name #> <pointer: 0x7f4bf1739ab0> #>  #> $dparse_get_d_debug_level #> <pointer: 0x7f4bf1739aa0> #>  #> $dparse_get_d_verbose_level #> <pointer: 0x7f4bf1739a80> #>  #> $dparse_get_d_use_file_name #> <pointer: 0x7f4bf1739a60> #>  #> $dparse_get_d_rdebug_grammar_level #> <pointer: 0x7f4bf1739a40> #>  #> $dparse_get_d_use_r_headers #> <pointer: 0x7f4bf1739a20> #>  #> $dparse_set_d_debug_level #> <pointer: 0x7f4bf1739a90> #>  #> $dparse_set_d_verbose_level #> <pointer: 0x7f4bf1739a70> #>  #> $dparse_set_d_use_file_name #> <pointer: 0x7f4bf1739a50> #>  #> $dparse_set_d_rdebug_grammar_level #> <pointer: 0x7f4bf1739a30> #>  #> $dparse_set_d_use_r_headers #> <pointer: 0x7f4bf1739a10> #>  #> $dparse_write_binary_tables_to_string #> <pointer: 0x7f4bf172f190> #>  #> $dparse_write_binary_tables_to_file #> <pointer: 0x7f4bf172f150> #>  #> $dparse_write_binary_tables #> <pointer: 0x7f4bf172f110> #>  #> $dparse_write_c_tables #> <pointer: 0x7f4bf172f0d0> #>  #> $dparse_escape_string_single_quote #> <pointer: 0x7f4bf1726b50> #>  #> $dparse_escape_string #> <pointer: 0x7f4bf1726b40> #>  #> $dparse_int_list_dup #> <pointer: 0x7f4bf1726ae0> #>  #> $dparse_int_list_intersect #> <pointer: 0x7f4bf1726a80> #>  #> $dparse_int_list_diff #> <pointer: 0x7f4bf1726a00> #>  #> $dparse_d_free #> <pointer: 0x7f4bf1726b60> #>  #> $dparse_strhashl #> <pointer: 0x7f4bf1725fd0> #>  #> $dparse_dup_str #> <pointer: 0x7f4bf1725f10> #>  #> $dparse_sbuf_read #> <pointer: 0x7f4bf17260f0> #>  #> $dparse_buf_read #> <pointer: 0x7f4bf1726020> #>  #> $dparse_set_to_vec #> <pointer: 0x7f4bf1726940> #>  #> $dparse_set_union_fn #> <pointer: 0x7f4bf1726770> #>  #> $dparse_set_union #> <pointer: 0x7f4bf17265d0> #>  #> $dparse_set_add #> <pointer: 0x7f4bf1726640> #>  #> $dparse_set_find #> <pointer: 0x7f4bf1726580> #>  #> $dparse_vec_eq #> <pointer: 0x7f4bf17264a0> #>  #> $dparse_vec_add_internal #> <pointer: 0x7f4bf17263c0> #>  #> $dparse_scan_buffer #> <pointer: 0x7f4bf17246c0> #>  #> $dparse_free_BinaryTables #> <pointer: 0x7f4bf17399f0> #>  #> $dparse_read_binary_tables_from_string #> <pointer: 0x7f4bf17399d0> #>  #> $dparse_read_binary_tables_from_file #> <pointer: 0x7f4bf17399b0> #>  #> $dparse_read_binary_tables #> <pointer: 0x7f4bf1739950> #>  #> $dparse_ambiguity_count_fn #> <pointer: 0x7f4bf1723fa0> #>  #> $dparse_mkdparse_from_string #> <pointer: 0x7f4bf1726c20> #>  #> $dparse_mkdparse #> <pointer: 0x7f4bf1726c10> #>  #> $dparse_free_Action #> <pointer: 0x7f4bf1738aa0> #>  #> $dparse_goto_State #> <pointer: 0x7f4bf1738af0> #>  #> $dparse_elem_symbol #> <pointer: 0x7f4bf1738a80> #>  #> $dparse_sort_VecAction #> <pointer: 0x7f4bf1738ac0> #>  #> $dparse_build_LR_tables #> <pointer: 0x7f4bf1738b40> #>  #> $dparse_build_scanners #> <pointer: 0x7f4bf1736bb0> #>  #> $dparse_state_for_declaration #> <pointer: 0x7f4bf1733710> #>  #> $dparse_initialize_productions #> <pointer: 0x7f4bf1732e20> #>  #> $dparse_rep_EBNF #> <pointer: 0x7f4bf1732c10> #>  #> $dparse_plus_EBNF #> <pointer: 0x7f4bf1732720> #>  #> $dparse_star_EBNF #> <pointer: 0x7f4bf17322d0> #>  #> $dparse_conditional_EBNF #> <pointer: 0x7f4bf1732070> #>  #> $dparse_find_pass #> <pointer: 0x7f4bf1731960> #>  #> $dparse_add_pass_code #> <pointer: 0x7f4bf1731b30> #>  #> $dparse_add_pass #> <pointer: 0x7f4bf1731a20> #>  #> $dparse_add_declaration #> <pointer: 0x7f4bf1731830> #>  #> $dparse_dup_elem #> <pointer: 0x7f4bf1731670> #>  #> $dparse_new_internal_production #> <pointer: 0x7f4bf1731ed0> #>  #> $dparse_add_global_code #> <pointer: 0x7f4bf17316e0> #>  #> $dparse_new_code #> <pointer: 0x7f4bf1731650> #>  #> $dparse_new_token #> <pointer: 0x7f4bf1731590> #>  #> $dparse_new_ident #> <pointer: 0x7f4bf17314c0> #>  #> $dparse_new_utf8_char #> <pointer: 0x7f4bf17312d0> #>  #> $dparse_new_string #> <pointer: 0x7f4bf1730f70> #>  #> $dparse_new_production #> <pointer: 0x7f4bf1731e00> #>  #> $dparse_new_declaration #> <pointer: 0x7f4bf1731790> #>  #> $dparse_new_elem_nterm #> <pointer: 0x7f4bf1730950> #>  #> $dparse_new_rule #> <pointer: 0x7f4bf17308f0> #>  #> $dparse_lookup_production #> <pointer: 0x7f4bf1731d90> #>  #> $dparse_print_term #> <pointer: 0x7f4bf1732e50> #>  #> $dparse_print_rule #> <pointer: 0x7f4bf1733000> #>  #> $dparse_print_states #> <pointer: 0x7f4bf1733370> #>  #> $dparse_print_rdebug_grammar #> <pointer: 0x7f4bf17354d0> #>  #> $dparse_print_grammar #> <pointer: 0x7f4bf1733090> #>  #> $dparse_parse_grammar #> <pointer: 0x7f4bf17344b0> #>  #> $dparse_build_grammar #> <pointer: 0x7f4bf1734630> #>  #> $dparse_free_D_Grammar #> <pointer: 0x7f4bf1733cf0> #>  #> $dparse_new_D_Grammar #> <pointer: 0x7f4bf1733ca0> #>  #> $dparse_print_scope #> <pointer: 0x7f4bf1725b90> #>  #> $dparse_next_D_Sym_in_Scope #> <pointer: 0x7f4bf17259b0> #>  #> $dparse_find_D_Sym_in_Scope #> <pointer: 0x7f4bf1725930> #>  #> $dparse_current_D_Sym #> <pointer: 0x7f4bf17256c0> #>  #> $dparse_update_additional_D_Sym #> <pointer: 0x7f4bf1725a80> #>  #> $dparse_update_D_Sym #> <pointer: 0x7f4bf1725ae0> #>  #> $dparse_find_global_D_Sym #> <pointer: 0x7f4bf17258b0> #>  #> $dparse_find_D_Sym #> <pointer: 0x7f4bf1725840> #>  #> $dparse_new_D_Sym #> <pointer: 0x7f4bf1725610> #>  #> $dparse_free_D_Scope #> <pointer: 0x7f4bf1725500> #>  #> $dparse_scope_D_Scope #> <pointer: 0x7f4bf17254a0> #>  #> $dparse_global_D_Scope #> <pointer: 0x7f4bf1725480> #>  #> $dparse_equiv_D_Scope #> <pointer: 0x7f4bf1725390> #>  #> $dparse_commit_D_Scope #> <pointer: 0x7f4bf1725700> #>  #> $dparse_enter_D_Scope #> <pointer: 0x7f4bf1725420> #>  #> $dparse_new_D_Scope #> <pointer: 0x7f4bf17252d0> #>  #> $dparse_parse_whitespace #> <pointer: 0x7f4bf1723e10> #>  #> $dparse_d_dup_pathname_str #> <pointer: 0x7f4bf1725f60> #>  #> $dparse_resolve_amb_greedy #> <pointer: 0x7f4bf1723eb0> #>  #> $dparse_d_pass #> <pointer: 0x7f4bf1723fc0> #>  #> $dparse_d_ws_after #> <pointer: 0x7f4bf1721570> #>  #> $dparse_d_ws_before #> <pointer: 0x7f4bf1721550> #>  #> $dparse_d_find_in_tree #> <pointer: 0x7f4bf17214f0> #>  #> $dparse_d_get_child #> <pointer: 0x7f4bf1721490> #>  #> $dparse_d_get_number_of_children #> <pointer: 0x7f4bf17214d0> #>  #> $dparse_free_D_ParseTreeBelow #> <pointer: 0x7f4bf1723f80> #>  #> $dparse_free_D_ParseNode #> <pointer: 0x7f4bf1724200> #>  #> $dparse_dparse #> <pointer: 0x7f4bf17242e0> #>  #> $dparse_free_D_Parser #> <pointer: 0x7f4bf17240f0> #>  #> $dparse_new_D_Parser #> <pointer: 0x7f4bf1724060> #>"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpDefaultSkip.html","id":null,"dir":"Reference","previous_headings":"","what":"Default skip function for darsing grammar — dpDefaultSkip","title":"Default skip function for darsing grammar — dpDefaultSkip","text":"function determine children parsed skipped. default, children parsed.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpDefaultSkip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default skip function for darsing grammar — dpDefaultSkip","text":"","code":"dpDefaultSkip(name, value, pos, depth)"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpDefaultSkip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default skip function for darsing grammar — dpDefaultSkip","text":"name Production Name value Production Value pos terminal position.  Negative values parsed children parsed.  value -1 means children nodes.  value -2 means children nodes. Otherwise, terminal position numbered starting 0. depth Parsing Depth","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpDefaultSkip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default skip function for darsing grammar — dpDefaultSkip","text":"FALSE.  comparable function returns TRUE,     children parsed.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpDefaultSkip.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default skip function for darsing grammar — dpDefaultSkip","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpGetFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file for dparser arguments — dpGetFile","title":"Get file for dparser arguments — dpGetFile","text":"Get file dparser arguments","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpGetFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file for dparser arguments — dpGetFile","text":"","code":"dpGetFile(file, fileext = \"\", envir = parent.frame(1))"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpGetFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file for dparser arguments — dpGetFile","text":"file - File handle.  file can : actual file. character string.  case, temporary file created character string. bracket {} enclosed R expression.  case contents expressions put temporary file. function.  case contents function body put temporary file. fileext file extension temporary file create envir Environment deparse variables","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpGetFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file for dparser arguments — dpGetFile","text":"list three elements: file file name either temporary file real file use_file_name file name used (TRUE), temporary file created(FALSE) md5 md5 model","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpGetFile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get file for dparser arguments — dpGetFile","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpIncludeDir.html","id":null,"dir":"Reference","previous_headings":"","what":"Dparser C headers include directory — dpIncludeDir","title":"Dparser C headers include directory — dpIncludeDir","text":"Return include directory","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpIncludeDir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dparser C headers include directory — dpIncludeDir","text":"","code":"dpIncludeDir(...)"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpIncludeDir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dparser C headers include directory — dpIncludeDir","text":"... Additional parameters sent file.path","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpIncludeDir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dparser C headers include directory — dpIncludeDir","text":"Dparser include directory","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpIncludeDir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dparser C headers include directory — dpIncludeDir","text":"include directory headers may needed build functions Dparser library.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpIncludeDir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dparser C headers include directory — dpIncludeDir","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpReload.html","id":null,"dir":"Reference","previous_headings":"","what":"Reload the R dparser dll — dpReload","title":"Reload the R dparser dll — dpReload","text":"can useful parsing one grammar seems affect another grammar.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpReload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reload the R dparser dll — dpReload","text":"","code":"dpReload()"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpReload.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reload the R dparser dll — dpReload","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpRparse.html","id":null,"dir":"Reference","previous_headings":"","what":"C code for R parser — dpRparse","title":"C code for R parser — dpRparse","text":"C code R parser","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpRparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C code for R parser — dpRparse","text":"","code":"dpRparse()"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpRparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"C code for R parser — dpRparse","text":"string generating C tree walker","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpRparse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"C code for R parser — dpRparse","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Version and repository for this dparser package. — dpVersion","title":"Version and repository for this dparser package. — dpVersion","text":"Version repository dparser package.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version and repository for this dparser package. — dpVersion","text":"","code":"dpVersion()"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Version and repository for this dparser package. — dpVersion","text":"character vector version repository.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dpVersion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Version and repository for this dparser package. — dpVersion","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create R-based Dparser tree walking function based on grammar — dparse","title":"Create R-based Dparser tree walking function based on grammar — dparse","text":"Note R-based dparser tree walking works Windows (R tools) Mac, Linux. Linking arbitrary c grammars works platform.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create R-based Dparser tree walking function based on grammar — dparse","text":"","code":"dparse(   grammar,   start_state = 0,   save_parse_tree = TRUE,   partial_parses = FALSE,   compare_stacks = TRUE,   commit_actions_interval = 100,   fixup = TRUE,   fixup_ebnf = FALSE,   nogreedy = FALSE,   noheight = FALSE,   use_file_name = TRUE,   parse_size = 1024,   verbose_level = 0,   children_first = TRUE,   ... )"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create R-based Dparser tree walking function based on grammar — dparse","text":"grammar Dparser grammar filename (must file \".g\" extension) start_state Start State (default 0) save_parse_tree Save Parse Tree (default TRUE) partial_parses Partial Parses (default FALSE) compare_stacks Compare Stacks (default TRUE) commit_actions_interval Commit Interval (default 100) fixup Fix-Internal Productions (default FALSE) fixup_ebnf Fixup EBNF Productions (default FALSE) nogreedy Greediness Disambiguation (default FALSE) noheight Height Disambiguation (default FALSE) use_file_name Use File Name syntax errors (default TRUE) parse_size Parser size (default 1024) verbose_level level verbosity creating parser (default 0) children_first TRUE, parse children parent (default TRUE). ... Parameters sent mkdparse, exception use_r_header forced TRUE.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create R-based Dparser tree walking function based on grammar — dparse","text":"function allows parsing file based     grammar supplied. function able     parse arbitrary grammars way may want     user supplied function.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparse.html","id":"garbage-collection","dir":"Reference","previous_headings":"","what":"Garbage collection","title":"Create R-based Dparser tree walking function based on grammar — dparse","text":"two user options control dlls grammars created dparser deleted upon garbage collection R exit associated active objects.  : dpaser.rm.unnamed.parser.dll: TRUE, remove parsers created strings, memory-based items R. dpaser.rm.unnamed.parser.dll: TRUE, removes parsers created grammar files.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create R-based Dparser tree walking function based on grammar — dparse","text":"","code":"# \\donttest{ ## This creates the R based parsing function.  It requires ## compilation and runs on most OSes, with the exception of solaris. ## Windows requires Rtools to be installed. f <- dparse(system.file(\"tran.g\", package = \"dparser\"),children_first=FALSE)  ## Once created, you may then use this function to parse an ## arbitrary syntax file.  For example: f(\" b       = -1 d/dt(X) = a*X + Y*Z; d/dt(Y) = b*(Y - Z); d/dt(Z) = -X*Y + c*Y - Z if (t < 0.02 | t > 99.98){     print } \", function(name, value, pos, depth){     ## This prints the name, value, position and depth passed to the     ##parsing function.     cat(sprintf(\"name:%s;value:%s;pos:%s;depth:%s\\n\", name, value, pos,                  depth)); }) #> name:statement_list;value:b       = -1 #> d/dt(X) = a*X + Y*Z; #> d/dt(Y) = b*(Y - Z); #> d/dt(Z) = -X*Y + c*Y - Z #> if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:-2;depth:0 #> name:statement_list;value:b       = -1 #> d/dt(X) = a*X + Y*Z; #> d/dt(Y) = b*(Y - Z); #> d/dt(Z) = -X*Y + c*Y - Z #> if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:0;depth:0 #> name:statement_list__3;value:b       = -1 #> d/dt(X) = a*X + Y*Z; #> d/dt(Y) = b*(Y - Z); #> d/dt(Z) = -X*Y + c*Y - Z #> if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:-2;depth:1 #> name:statement_list__3;value:b       = -1 #> ;pos:0;depth:1 #> name:statement_list__2;value:b       = -1 #> ;pos:-2;depth:2 #> name:statement_list__2;value:b       = -1 #> ;pos:0;depth:2 #> name:statement;value:b       = -1 #> ;pos:-2;depth:3 #> name:statement;value:b       = -1;pos:0;depth:3 #> name:ini;value:b       = -1;pos:-2;depth:4 #> name:ini;value:b;pos:0;depth:4 #> name:identifier_r;value:b;pos:-2;depth:5 #> name:identifier_r;value:b;pos:0;depth:5 #> name:identifier_r_1;value:b;pos:-2;depth:6 #> name:identifier_r_1;value:b;pos:0;depth:6 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:b;pos:-1;depth:7 #> name:ini;value:=;pos:1;depth:4 #> name:ini__19;value:=;pos:-2;depth:5 #> name:ini__19;value:=;pos:0;depth:5 #> name:=;value:=;pos:-1;depth:6 #> name:ini;value:-1;pos:2;depth:4 #> name:ini_const;value:-1;pos:-2;depth:5 #> name:ini_const;value:-;pos:0;depth:5 #> name:ini_const__80;value:-;pos:-2;depth:6 #> name:ini_const__80;value:-;pos:0;depth:6 #> name:-;value:-;pos:-1;depth:7 #> name:ini_const;value:1;pos:1;depth:5 #> name:constant;value:1;pos:-2;depth:6 #> name:constant;value:1;pos:0;depth:6 #> name:decimalint;value:1;pos:-2;depth:7 #> name:decimalint;value:1;pos:0;depth:7 #> name:0|([1-9][0-9]*);value:1;pos:-1;depth:8 #> name:statement;value:;pos:1;depth:3 #> name:end_statement;value:;pos:-2;depth:4 #> name:end_statement;value:;pos:0;depth:4 #> name:end_statement__36;value:;pos:-1;depth:5 #> name:statement_list__3;value:d/dt(X) = a*X + Y*Z;;pos:1;depth:1 #> name:statement_list__2;value:d/dt(X) = a*X + Y*Z;;pos:-2;depth:2 #> name:statement_list__2;value:d/dt(X) = a*X + Y*Z;;pos:0;depth:2 #> name:statement;value:d/dt(X) = a*X + Y*Z;;pos:-2;depth:3 #> name:statement;value:d/dt(X) = a*X + Y*Z;pos:0;depth:3 #> name:derivative;value:d/dt(X) = a*X + Y*Z;pos:-2;depth:4 #> name:derivative;value:d/dt;pos:0;depth:4 #> name:d/dt;value:d/dt;pos:-1;depth:5 #> name:derivative;value:(;pos:1;depth:4 #> name:(;value:(;pos:-1;depth:5 #> name:derivative;value:X;pos:2;depth:4 #> name:identifier_r_no_output;value:X;pos:-2;depth:5 #> name:identifier_r_no_output;value:X;pos:0;depth:5 #> name:identifier_r_no_output_1;value:X;pos:-2;depth:6 #> name:identifier_r_no_output_1;value:X;pos:0;depth:6 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:X;pos:-1;depth:7 #> name:derivative;value:);pos:3;depth:4 #> name:);value:);pos:-1;depth:5 #> name:derivative;value:=;pos:4;depth:4 #> name:derivative__23;value:=;pos:-2;depth:5 #> name:derivative__23;value:=;pos:0;depth:5 #> name:=;value:=;pos:-1;depth:6 #> name:derivative;value:a*X + Y*Z;pos:5;depth:4 #> name:additive_expression;value:a*X + Y*Z;pos:-2;depth:5 #> name:additive_expression;value:a*X;pos:0;depth:5 #> name:multiplicative_expression;value:a*X;pos:-2;depth:6 #> name:multiplicative_expression;value:a;pos:0;depth:6 #> name:unary_expression;value:a;pos:-2;depth:7 #> name:unary_expression;value:;pos:0;depth:7 #> name:unary_expression__66;value:;pos:-1;depth:8 #> name:unary_expression;value:a;pos:1;depth:7 #> name:unary_expression__67;value:a;pos:-2;depth:8 #> name:unary_expression__67;value:a;pos:0;depth:8 #> name:primary_expression;value:a;pos:-2;depth:9 #> name:primary_expression;value:a;pos:0;depth:9 #> name:identifier_r;value:a;pos:-2;depth:10 #> name:identifier_r;value:a;pos:0;depth:10 #> name:identifier_r_1;value:a;pos:-2;depth:11 #> name:identifier_r_1;value:a;pos:0;depth:11 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:a;pos:-1;depth:12 #> name:multiplicative_expression;value:*X;pos:1;depth:6 #> name:multiplicative_expression__63;value:*X;pos:-2;depth:7 #> name:multiplicative_expression__63;value:*X;pos:0;depth:7 #> name:multiplicative_expression__61;value:*X;pos:-2;depth:8 #> name:multiplicative_expression__61;value:*;pos:0;depth:8 #> name:multiplicative_expression__61__62;value:*;pos:-2;depth:9 #> name:multiplicative_expression__61__62;value:*;pos:0;depth:9 #> name:*;value:*;pos:-1;depth:10 #> name:multiplicative_expression__61;value:X;pos:1;depth:8 #> name:unary_expression;value:X;pos:-2;depth:9 #> name:unary_expression;value:;pos:0;depth:9 #> name:unary_expression__66;value:;pos:-1;depth:10 #> name:unary_expression;value:X;pos:1;depth:9 #> name:unary_expression__67;value:X;pos:-2;depth:10 #> name:unary_expression__67;value:X;pos:0;depth:10 #> name:primary_expression;value:X;pos:-2;depth:11 #> name:primary_expression;value:X;pos:0;depth:11 #> name:identifier_r;value:X;pos:-2;depth:12 #> name:identifier_r;value:X;pos:0;depth:12 #> name:identifier_r_1;value:X;pos:-2;depth:13 #> name:identifier_r_1;value:X;pos:0;depth:13 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:X;pos:-1;depth:14 #> name:additive_expression;value:+ Y*Z;pos:1;depth:5 #> name:additive_expression__59;value:+ Y*Z;pos:-2;depth:6 #> name:additive_expression__59;value:+ Y*Z;pos:0;depth:6 #> name:additive_expression__57;value:+ Y*Z;pos:-2;depth:7 #> name:additive_expression__57;value:+;pos:0;depth:7 #> name:additive_expression__57__58;value:+;pos:-2;depth:8 #> name:additive_expression__57__58;value:+;pos:0;depth:8 #> name:+;value:+;pos:-1;depth:9 #> name:additive_expression__57;value:Y*Z;pos:1;depth:7 #> name:multiplicative_expression;value:Y*Z;pos:-2;depth:8 #> name:multiplicative_expression;value:Y;pos:0;depth:8 #> name:unary_expression;value:Y;pos:-2;depth:9 #> name:unary_expression;value:;pos:0;depth:9 #> name:unary_expression__66;value:;pos:-1;depth:10 #> name:unary_expression;value:Y;pos:1;depth:9 #> name:unary_expression__67;value:Y;pos:-2;depth:10 #> name:unary_expression__67;value:Y;pos:0;depth:10 #> name:primary_expression;value:Y;pos:-2;depth:11 #> name:primary_expression;value:Y;pos:0;depth:11 #> name:identifier_r;value:Y;pos:-2;depth:12 #> name:identifier_r;value:Y;pos:0;depth:12 #> name:identifier_r_1;value:Y;pos:-2;depth:13 #> name:identifier_r_1;value:Y;pos:0;depth:13 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Y;pos:-1;depth:14 #> name:multiplicative_expression;value:*Z;pos:1;depth:8 #> name:multiplicative_expression__63;value:*Z;pos:-2;depth:9 #> name:multiplicative_expression__63;value:*Z;pos:0;depth:9 #> name:multiplicative_expression__61;value:*Z;pos:-2;depth:10 #> name:multiplicative_expression__61;value:*;pos:0;depth:10 #> name:multiplicative_expression__61__62;value:*;pos:-2;depth:11 #> name:multiplicative_expression__61__62;value:*;pos:0;depth:11 #> name:*;value:*;pos:-1;depth:12 #> name:multiplicative_expression__61;value:Z;pos:1;depth:10 #> name:unary_expression;value:Z;pos:-2;depth:11 #> name:unary_expression;value:;pos:0;depth:11 #> name:unary_expression__66;value:;pos:-1;depth:12 #> name:unary_expression;value:Z;pos:1;depth:11 #> name:unary_expression__67;value:Z;pos:-2;depth:12 #> name:unary_expression__67;value:Z;pos:0;depth:12 #> name:primary_expression;value:Z;pos:-2;depth:13 #> name:primary_expression;value:Z;pos:0;depth:13 #> name:identifier_r;value:Z;pos:-2;depth:14 #> name:identifier_r;value:Z;pos:0;depth:14 #> name:identifier_r_1;value:Z;pos:-2;depth:15 #> name:identifier_r_1;value:Z;pos:0;depth:15 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Z;pos:-1;depth:16 #> name:statement;value:;;pos:1;depth:3 #> name:end_statement;value:;;pos:-2;depth:4 #> name:end_statement;value:;;pos:0;depth:4 #> name:end_statement__36;value:;;pos:-2;depth:5 #> name:end_statement__36;value:;;pos:0;depth:5 #> name:end_statement__35;value:;;pos:-2;depth:6 #> name:end_statement__35;value:;;pos:0;depth:6 #> name:;;value:;;pos:-1;depth:7 #> name:statement_list__3;value:d/dt(Y) = b*(Y - Z);;pos:2;depth:1 #> name:statement_list__2;value:d/dt(Y) = b*(Y - Z);;pos:-2;depth:2 #> name:statement_list__2;value:d/dt(Y) = b*(Y - Z);;pos:0;depth:2 #> name:statement;value:d/dt(Y) = b*(Y - Z);;pos:-2;depth:3 #> name:statement;value:d/dt(Y) = b*(Y - Z);pos:0;depth:3 #> name:derivative;value:d/dt(Y) = b*(Y - Z);pos:-2;depth:4 #> name:derivative;value:d/dt;pos:0;depth:4 #> name:d/dt;value:d/dt;pos:-1;depth:5 #> name:derivative;value:(;pos:1;depth:4 #> name:(;value:(;pos:-1;depth:5 #> name:derivative;value:Y;pos:2;depth:4 #> name:identifier_r_no_output;value:Y;pos:-2;depth:5 #> name:identifier_r_no_output;value:Y;pos:0;depth:5 #> name:identifier_r_no_output_1;value:Y;pos:-2;depth:6 #> name:identifier_r_no_output_1;value:Y;pos:0;depth:6 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Y;pos:-1;depth:7 #> name:derivative;value:);pos:3;depth:4 #> name:);value:);pos:-1;depth:5 #> name:derivative;value:=;pos:4;depth:4 #> name:derivative__23;value:=;pos:-2;depth:5 #> name:derivative__23;value:=;pos:0;depth:5 #> name:=;value:=;pos:-1;depth:6 #> name:derivative;value:b*(Y - Z);pos:5;depth:4 #> name:additive_expression;value:b*(Y - Z);pos:-2;depth:5 #> name:additive_expression;value:b*(Y - Z);pos:0;depth:5 #> name:multiplicative_expression;value:b*(Y - Z);pos:-2;depth:6 #> name:multiplicative_expression;value:b;pos:0;depth:6 #> name:unary_expression;value:b;pos:-2;depth:7 #> name:unary_expression;value:;pos:0;depth:7 #> name:unary_expression__66;value:;pos:-1;depth:8 #> name:unary_expression;value:b;pos:1;depth:7 #> name:unary_expression__67;value:b;pos:-2;depth:8 #> name:unary_expression__67;value:b;pos:0;depth:8 #> name:primary_expression;value:b;pos:-2;depth:9 #> name:primary_expression;value:b;pos:0;depth:9 #> name:identifier_r;value:b;pos:-2;depth:10 #> name:identifier_r;value:b;pos:0;depth:10 #> name:identifier_r_1;value:b;pos:-2;depth:11 #> name:identifier_r_1;value:b;pos:0;depth:11 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:b;pos:-1;depth:12 #> name:multiplicative_expression;value:*(Y - Z);pos:1;depth:6 #> name:multiplicative_expression__63;value:*(Y - Z);pos:-2;depth:7 #> name:multiplicative_expression__63;value:*(Y - Z);pos:0;depth:7 #> name:multiplicative_expression__61;value:*(Y - Z);pos:-2;depth:8 #> name:multiplicative_expression__61;value:*;pos:0;depth:8 #> name:multiplicative_expression__61__62;value:*;pos:-2;depth:9 #> name:multiplicative_expression__61__62;value:*;pos:0;depth:9 #> name:*;value:*;pos:-1;depth:10 #> name:multiplicative_expression__61;value:(Y - Z);pos:1;depth:8 #> name:unary_expression;value:(Y - Z);pos:-2;depth:9 #> name:unary_expression;value:;pos:0;depth:9 #> name:unary_expression__66;value:;pos:-1;depth:10 #> name:unary_expression;value:(Y - Z);pos:1;depth:9 #> name:unary_expression__67;value:(Y - Z);pos:-2;depth:10 #> name:unary_expression__67;value:(Y - Z);pos:0;depth:10 #> name:primary_expression;value:(Y - Z);pos:-2;depth:11 #> name:primary_expression;value:(;pos:0;depth:11 #> name:(;value:(;pos:-1;depth:12 #> name:primary_expression;value:Y - Z;pos:1;depth:11 #> name:additive_expression;value:Y - Z;pos:-2;depth:12 #> name:additive_expression;value:Y ;pos:0;depth:12 #> name:multiplicative_expression;value:Y ;pos:-2;depth:13 #> name:multiplicative_expression;value:Y;pos:0;depth:13 #> name:unary_expression;value:Y;pos:-2;depth:14 #> name:unary_expression;value:;pos:0;depth:14 #> name:unary_expression__66;value:;pos:-1;depth:15 #> name:unary_expression;value:Y;pos:1;depth:14 #> name:unary_expression__67;value:Y;pos:-2;depth:15 #> name:unary_expression__67;value:Y;pos:0;depth:15 #> name:primary_expression;value:Y;pos:-2;depth:16 #> name:primary_expression;value:Y;pos:0;depth:16 #> name:identifier_r;value:Y;pos:-2;depth:17 #> name:identifier_r;value:Y;pos:0;depth:17 #> name:identifier_r_1;value:Y;pos:-2;depth:18 #> name:identifier_r_1;value:Y;pos:0;depth:18 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Y;pos:-1;depth:19 #> name:multiplicative_expression;value:;pos:1;depth:13 #> name:multiplicative_expression__63;value:;pos:-1;depth:14 #> name:additive_expression;value:- Z;pos:1;depth:12 #> name:additive_expression__59;value:- Z;pos:-2;depth:13 #> name:additive_expression__59;value:- Z;pos:0;depth:13 #> name:additive_expression__57;value:- Z;pos:-2;depth:14 #> name:additive_expression__57;value:-;pos:0;depth:14 #> name:additive_expression__57__58;value:-;pos:-2;depth:15 #> name:additive_expression__57__58;value:-;pos:0;depth:15 #> name:-;value:-;pos:-1;depth:16 #> name:additive_expression__57;value:Z;pos:1;depth:14 #> name:multiplicative_expression;value:Z;pos:-2;depth:15 #> name:multiplicative_expression;value:Z;pos:0;depth:15 #> name:unary_expression;value:Z;pos:-2;depth:16 #> name:unary_expression;value:;pos:0;depth:16 #> name:unary_expression__66;value:;pos:-1;depth:17 #> name:unary_expression;value:Z;pos:1;depth:16 #> name:unary_expression__67;value:Z;pos:-2;depth:17 #> name:unary_expression__67;value:Z;pos:0;depth:17 #> name:primary_expression;value:Z;pos:-2;depth:18 #> name:primary_expression;value:Z;pos:0;depth:18 #> name:identifier_r;value:Z;pos:-2;depth:19 #> name:identifier_r;value:Z;pos:0;depth:19 #> name:identifier_r_1;value:Z;pos:-2;depth:20 #> name:identifier_r_1;value:Z;pos:0;depth:20 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Z;pos:-1;depth:21 #> name:multiplicative_expression;value:;pos:1;depth:15 #> name:multiplicative_expression__63;value:;pos:-1;depth:16 #> name:primary_expression;value:);pos:2;depth:11 #> name:);value:);pos:-1;depth:12 #> name:additive_expression;value:;pos:1;depth:5 #> name:additive_expression__59;value:;pos:-1;depth:6 #> name:statement;value:;;pos:1;depth:3 #> name:end_statement;value:;;pos:-2;depth:4 #> name:end_statement;value:;;pos:0;depth:4 #> name:end_statement__36;value:;;pos:-2;depth:5 #> name:end_statement__36;value:;;pos:0;depth:5 #> name:end_statement__35;value:;;pos:-2;depth:6 #> name:end_statement__35;value:;;pos:0;depth:6 #> name:;;value:;;pos:-1;depth:7 #> name:statement_list__3;value:d/dt(Z) = -X*Y + c*Y - Z #> ;pos:3;depth:1 #> name:statement_list__2;value:d/dt(Z) = -X*Y + c*Y - Z #> ;pos:-2;depth:2 #> name:statement_list__2;value:d/dt(Z) = -X*Y + c*Y - Z #> ;pos:0;depth:2 #> name:statement;value:d/dt(Z) = -X*Y + c*Y - Z #> ;pos:-2;depth:3 #> name:statement;value:d/dt(Z) = -X*Y + c*Y - Z #> ;pos:0;depth:3 #> name:derivative;value:d/dt(Z) = -X*Y + c*Y - Z #> ;pos:-2;depth:4 #> name:derivative;value:d/dt;pos:0;depth:4 #> name:d/dt;value:d/dt;pos:-1;depth:5 #> name:derivative;value:(;pos:1;depth:4 #> name:(;value:(;pos:-1;depth:5 #> name:derivative;value:Z;pos:2;depth:4 #> name:identifier_r_no_output;value:Z;pos:-2;depth:5 #> name:identifier_r_no_output;value:Z;pos:0;depth:5 #> name:identifier_r_no_output_1;value:Z;pos:-2;depth:6 #> name:identifier_r_no_output_1;value:Z;pos:0;depth:6 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Z;pos:-1;depth:7 #> name:derivative;value:);pos:3;depth:4 #> name:);value:);pos:-1;depth:5 #> name:derivative;value:=;pos:4;depth:4 #> name:derivative__23;value:=;pos:-2;depth:5 #> name:derivative__23;value:=;pos:0;depth:5 #> name:=;value:=;pos:-1;depth:6 #> name:derivative;value:-X*Y + c*Y - Z #> ;pos:5;depth:4 #> name:additive_expression;value:-X*Y + c*Y - Z #> ;pos:-2;depth:5 #> name:additive_expression;value:-X*Y;pos:0;depth:5 #> name:multiplicative_expression;value:-X*Y;pos:-2;depth:6 #> name:multiplicative_expression;value:-X;pos:0;depth:6 #> name:unary_expression;value:-X;pos:-2;depth:7 #> name:unary_expression;value:-;pos:0;depth:7 #> name:unary_expression__66;value:-;pos:-2;depth:8 #> name:unary_expression__66;value:-;pos:0;depth:8 #> name:unary_expression__65;value:-;pos:-2;depth:9 #> name:unary_expression__65;value:-;pos:0;depth:9 #> name:-;value:-;pos:-1;depth:10 #> name:unary_expression;value:X;pos:1;depth:7 #> name:unary_expression__67;value:X;pos:-2;depth:8 #> name:unary_expression__67;value:X;pos:0;depth:8 #> name:primary_expression;value:X;pos:-2;depth:9 #> name:primary_expression;value:X;pos:0;depth:9 #> name:identifier_r;value:X;pos:-2;depth:10 #> name:identifier_r;value:X;pos:0;depth:10 #> name:identifier_r_1;value:X;pos:-2;depth:11 #> name:identifier_r_1;value:X;pos:0;depth:11 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:X;pos:-1;depth:12 #> name:multiplicative_expression;value:*Y;pos:1;depth:6 #> name:multiplicative_expression__63;value:*Y;pos:-2;depth:7 #> name:multiplicative_expression__63;value:*Y;pos:0;depth:7 #> name:multiplicative_expression__61;value:*Y;pos:-2;depth:8 #> name:multiplicative_expression__61;value:*;pos:0;depth:8 #> name:multiplicative_expression__61__62;value:*;pos:-2;depth:9 #> name:multiplicative_expression__61__62;value:*;pos:0;depth:9 #> name:*;value:*;pos:-1;depth:10 #> name:multiplicative_expression__61;value:Y;pos:1;depth:8 #> name:unary_expression;value:Y;pos:-2;depth:9 #> name:unary_expression;value:;pos:0;depth:9 #> name:unary_expression__66;value:;pos:-1;depth:10 #> name:unary_expression;value:Y;pos:1;depth:9 #> name:unary_expression__67;value:Y;pos:-2;depth:10 #> name:unary_expression__67;value:Y;pos:0;depth:10 #> name:primary_expression;value:Y;pos:-2;depth:11 #> name:primary_expression;value:Y;pos:0;depth:11 #> name:identifier_r;value:Y;pos:-2;depth:12 #> name:identifier_r;value:Y;pos:0;depth:12 #> name:identifier_r_1;value:Y;pos:-2;depth:13 #> name:identifier_r_1;value:Y;pos:0;depth:13 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Y;pos:-1;depth:14 #> name:additive_expression;value:+ c*Y - Z #> ;pos:1;depth:5 #> name:additive_expression__59;value:+ c*Y - Z #> ;pos:-2;depth:6 #> name:additive_expression__59;value:+ c*Y;pos:0;depth:6 #> name:additive_expression__57;value:+ c*Y;pos:-2;depth:7 #> name:additive_expression__57;value:+;pos:0;depth:7 #> name:additive_expression__57__58;value:+;pos:-2;depth:8 #> name:additive_expression__57__58;value:+;pos:0;depth:8 #> name:+;value:+;pos:-1;depth:9 #> name:additive_expression__57;value:c*Y;pos:1;depth:7 #> name:multiplicative_expression;value:c*Y;pos:-2;depth:8 #> name:multiplicative_expression;value:c;pos:0;depth:8 #> name:unary_expression;value:c;pos:-2;depth:9 #> name:unary_expression;value:;pos:0;depth:9 #> name:unary_expression__66;value:;pos:-1;depth:10 #> name:unary_expression;value:c;pos:1;depth:9 #> name:unary_expression__67;value:c;pos:-2;depth:10 #> name:unary_expression__67;value:c;pos:0;depth:10 #> name:primary_expression;value:c;pos:-2;depth:11 #> name:primary_expression;value:c;pos:0;depth:11 #> name:identifier_r;value:c;pos:-2;depth:12 #> name:identifier_r;value:c;pos:0;depth:12 #> name:identifier_r_1;value:c;pos:-2;depth:13 #> name:identifier_r_1;value:c;pos:0;depth:13 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:c;pos:-1;depth:14 #> name:multiplicative_expression;value:*Y;pos:1;depth:8 #> name:multiplicative_expression__63;value:*Y;pos:-2;depth:9 #> name:multiplicative_expression__63;value:*Y;pos:0;depth:9 #> name:multiplicative_expression__61;value:*Y;pos:-2;depth:10 #> name:multiplicative_expression__61;value:*;pos:0;depth:10 #> name:multiplicative_expression__61__62;value:*;pos:-2;depth:11 #> name:multiplicative_expression__61__62;value:*;pos:0;depth:11 #> name:*;value:*;pos:-1;depth:12 #> name:multiplicative_expression__61;value:Y;pos:1;depth:10 #> name:unary_expression;value:Y;pos:-2;depth:11 #> name:unary_expression;value:;pos:0;depth:11 #> name:unary_expression__66;value:;pos:-1;depth:12 #> name:unary_expression;value:Y;pos:1;depth:11 #> name:unary_expression__67;value:Y;pos:-2;depth:12 #> name:unary_expression__67;value:Y;pos:0;depth:12 #> name:primary_expression;value:Y;pos:-2;depth:13 #> name:primary_expression;value:Y;pos:0;depth:13 #> name:identifier_r;value:Y;pos:-2;depth:14 #> name:identifier_r;value:Y;pos:0;depth:14 #> name:identifier_r_1;value:Y;pos:-2;depth:15 #> name:identifier_r_1;value:Y;pos:0;depth:15 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Y;pos:-1;depth:16 #> name:additive_expression__59;value:- Z #> ;pos:1;depth:6 #> name:additive_expression__57;value:- Z #> ;pos:-2;depth:7 #> name:additive_expression__57;value:-;pos:0;depth:7 #> name:additive_expression__57__58;value:-;pos:-2;depth:8 #> name:additive_expression__57__58;value:-;pos:0;depth:8 #> name:-;value:-;pos:-1;depth:9 #> name:additive_expression__57;value:Z #> ;pos:1;depth:7 #> name:multiplicative_expression;value:Z #> ;pos:-2;depth:8 #> name:multiplicative_expression;value:Z;pos:0;depth:8 #> name:unary_expression;value:Z;pos:-2;depth:9 #> name:unary_expression;value:;pos:0;depth:9 #> name:unary_expression__66;value:;pos:-1;depth:10 #> name:unary_expression;value:Z;pos:1;depth:9 #> name:unary_expression__67;value:Z;pos:-2;depth:10 #> name:unary_expression__67;value:Z;pos:0;depth:10 #> name:primary_expression;value:Z;pos:-2;depth:11 #> name:primary_expression;value:Z;pos:0;depth:11 #> name:identifier_r;value:Z;pos:-2;depth:12 #> name:identifier_r;value:Z;pos:0;depth:12 #> name:identifier_r_1;value:Z;pos:-2;depth:13 #> name:identifier_r_1;value:Z;pos:0;depth:13 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:Z;pos:-1;depth:14 #> name:multiplicative_expression;value:;pos:1;depth:8 #> name:multiplicative_expression__63;value:;pos:-1;depth:9 #> name:statement;value:;pos:1;depth:3 #> name:end_statement;value:;pos:-2;depth:4 #> name:end_statement;value:;pos:0;depth:4 #> name:end_statement__36;value:;pos:-1;depth:5 #> name:statement_list__3;value:if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:4;depth:1 #> name:statement_list__2;value:if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:-2;depth:2 #> name:statement_list__2;value:if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:0;depth:2 #> name:statement;value:if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:-2;depth:3 #> name:statement;value:if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:0;depth:3 #> name:selection_statement;value:if (t < 0.02 | t > 99.98){ #>     print #> } #> ;pos:-2;depth:4 #> name:selection_statement;value:if;pos:0;depth:4 #> name:if;value:if;pos:-1;depth:5 #> name:selection_statement;value:(;pos:1;depth:4 #> name:(;value:(;pos:-1;depth:5 #> name:selection_statement;value:t < 0.02 | t > 99.98;pos:2;depth:4 #> name:logical_or_expression;value:t < 0.02 | t > 99.98;pos:-2;depth:5 #> name:logical_or_expression;value:t < 0.02 ;pos:0;depth:5 #> name:logical_and_expression;value:t < 0.02 ;pos:-2;depth:6 #> name:logical_and_expression;value:t < 0.02 ;pos:0;depth:6 #> name:equality_expression0;value:t < 0.02 ;pos:-2;depth:7 #> name:equality_expression0;value:t < 0.02 ;pos:0;depth:7 #> name:equality_expression;value:t < 0.02 ;pos:-2;depth:8 #> name:equality_expression;value:t < 0.02 ;pos:0;depth:8 #> name:relational_expression;value:t < 0.02 ;pos:-2;depth:9 #> name:relational_expression;value:t ;pos:0;depth:9 #> name:additive_expression;value:t ;pos:-2;depth:10 #> name:additive_expression;value:t ;pos:0;depth:10 #> name:multiplicative_expression;value:t ;pos:-2;depth:11 #> name:multiplicative_expression;value:t;pos:0;depth:11 #> name:unary_expression;value:t;pos:-2;depth:12 #> name:unary_expression;value:;pos:0;depth:12 #> name:unary_expression__66;value:;pos:-1;depth:13 #> name:unary_expression;value:t;pos:1;depth:12 #> name:unary_expression__67;value:t;pos:-2;depth:13 #> name:unary_expression__67;value:t;pos:0;depth:13 #> name:primary_expression;value:t;pos:-2;depth:14 #> name:primary_expression;value:t;pos:0;depth:14 #> name:identifier_r;value:t;pos:-2;depth:15 #> name:identifier_r;value:t;pos:0;depth:15 #> name:identifier_r_1;value:t;pos:-2;depth:16 #> name:identifier_r_1;value:t;pos:0;depth:16 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:t;pos:-1;depth:17 #> name:multiplicative_expression;value:;pos:1;depth:11 #> name:multiplicative_expression__63;value:;pos:-1;depth:12 #> name:additive_expression;value:;pos:1;depth:10 #> name:additive_expression__59;value:;pos:-1;depth:11 #> name:relational_expression;value:< 0.02 ;pos:1;depth:9 #> name:relational_expression__55;value:< 0.02 ;pos:-2;depth:10 #> name:relational_expression__55;value:< 0.02 ;pos:0;depth:10 #> name:relational_expression__53;value:< 0.02 ;pos:-2;depth:11 #> name:relational_expression__53;value:<;pos:0;depth:11 #> name:relational_expression__53__54;value:<;pos:-2;depth:12 #> name:relational_expression__53__54;value:<;pos:0;depth:12 #> name:<;value:<;pos:-1;depth:13 #> name:relational_expression__53;value:0.02 ;pos:1;depth:11 #> name:additive_expression;value:0.02 ;pos:-2;depth:12 #> name:additive_expression;value:0.02 ;pos:0;depth:12 #> name:multiplicative_expression;value:0.02 ;pos:-2;depth:13 #> name:multiplicative_expression;value:0.02;pos:0;depth:13 #> name:unary_expression;value:0.02;pos:-2;depth:14 #> name:unary_expression;value:;pos:0;depth:14 #> name:unary_expression__66;value:;pos:-1;depth:15 #> name:unary_expression;value:0.02;pos:1;depth:14 #> name:unary_expression__67;value:0.02;pos:-2;depth:15 #> name:unary_expression__67;value:0.02;pos:0;depth:15 #> name:primary_expression;value:0.02;pos:-2;depth:16 #> name:primary_expression;value:0.02;pos:0;depth:16 #> name:constant;value:0.02;pos:-2;depth:17 #> name:constant;value:0.02;pos:0;depth:17 #> name:float1;value:0.02;pos:-2;depth:18 #> name:float1;value:0.02;pos:0;depth:18 #> name:([0-9]+.[0-9]*|[0-9]*.[0-9]+)([eE][\\-\\+]?[0-9]+)?;value:0.02;pos:-1;depth:19 #> name:multiplicative_expression;value:;pos:1;depth:13 #> name:multiplicative_expression__63;value:;pos:-1;depth:14 #> name:additive_expression;value:;pos:1;depth:12 #> name:additive_expression__59;value:;pos:-1;depth:13 #> name:equality_expression;value:;pos:1;depth:8 #> name:equality_expression__51;value:;pos:-1;depth:9 #> name:logical_and_expression;value:;pos:1;depth:6 #> name:logical_and_expression__46;value:;pos:-1;depth:7 #> name:logical_or_expression;value:| t > 99.98;pos:1;depth:5 #> name:logical_or_expression__42;value:| t > 99.98;pos:-2;depth:6 #> name:logical_or_expression__42;value:| t > 99.98;pos:0;depth:6 #> name:logical_or_expression__40;value:| t > 99.98;pos:-2;depth:7 #> name:logical_or_expression__40;value:|;pos:0;depth:7 #> name:logical_or_expression__40__41;value:|;pos:-2;depth:8 #> name:logical_or_expression__40__41;value:|;pos:0;depth:8 #> name:|;value:|;pos:-1;depth:9 #> name:logical_or_expression__40;value:t > 99.98;pos:1;depth:7 #> name:logical_and_expression;value:t > 99.98;pos:-2;depth:8 #> name:logical_and_expression;value:t > 99.98;pos:0;depth:8 #> name:equality_expression0;value:t > 99.98;pos:-2;depth:9 #> name:equality_expression0;value:t > 99.98;pos:0;depth:9 #> name:equality_expression;value:t > 99.98;pos:-2;depth:10 #> name:equality_expression;value:t > 99.98;pos:0;depth:10 #> name:relational_expression;value:t > 99.98;pos:-2;depth:11 #> name:relational_expression;value:t ;pos:0;depth:11 #> name:additive_expression;value:t ;pos:-2;depth:12 #> name:additive_expression;value:t ;pos:0;depth:12 #> name:multiplicative_expression;value:t ;pos:-2;depth:13 #> name:multiplicative_expression;value:t;pos:0;depth:13 #> name:unary_expression;value:t;pos:-2;depth:14 #> name:unary_expression;value:;pos:0;depth:14 #> name:unary_expression__66;value:;pos:-1;depth:15 #> name:unary_expression;value:t;pos:1;depth:14 #> name:unary_expression__67;value:t;pos:-2;depth:15 #> name:unary_expression__67;value:t;pos:0;depth:15 #> name:primary_expression;value:t;pos:-2;depth:16 #> name:primary_expression;value:t;pos:0;depth:16 #> name:identifier_r;value:t;pos:-2;depth:17 #> name:identifier_r;value:t;pos:0;depth:17 #> name:identifier_r_1;value:t;pos:-2;depth:18 #> name:identifier_r_1;value:t;pos:0;depth:18 #> name:[a-zA-Z_][a-zA-Z0-9_.]*;value:t;pos:-1;depth:19 #> name:multiplicative_expression;value:;pos:1;depth:13 #> name:multiplicative_expression__63;value:;pos:-1;depth:14 #> name:additive_expression;value:;pos:1;depth:12 #> name:additive_expression__59;value:;pos:-1;depth:13 #> name:relational_expression;value:> 99.98;pos:1;depth:11 #> name:relational_expression__55;value:> 99.98;pos:-2;depth:12 #> name:relational_expression__55;value:> 99.98;pos:0;depth:12 #> name:relational_expression__53;value:> 99.98;pos:-2;depth:13 #> name:relational_expression__53;value:>;pos:0;depth:13 #> name:relational_expression__53__54;value:>;pos:-2;depth:14 #> name:relational_expression__53__54;value:>;pos:0;depth:14 #> name:>;value:>;pos:-1;depth:15 #> name:relational_expression__53;value:99.98;pos:1;depth:13 #> name:additive_expression;value:99.98;pos:-2;depth:14 #> name:additive_expression;value:99.98;pos:0;depth:14 #> name:multiplicative_expression;value:99.98;pos:-2;depth:15 #> name:multiplicative_expression;value:99.98;pos:0;depth:15 #> name:unary_expression;value:99.98;pos:-2;depth:16 #> name:unary_expression;value:;pos:0;depth:16 #> name:unary_expression__66;value:;pos:-1;depth:17 #> name:unary_expression;value:99.98;pos:1;depth:16 #> name:unary_expression__67;value:99.98;pos:-2;depth:17 #> name:unary_expression__67;value:99.98;pos:0;depth:17 #> name:primary_expression;value:99.98;pos:-2;depth:18 #> name:primary_expression;value:99.98;pos:0;depth:18 #> name:constant;value:99.98;pos:-2;depth:19 #> name:constant;value:99.98;pos:0;depth:19 #> name:float1;value:99.98;pos:-2;depth:20 #> name:float1;value:99.98;pos:0;depth:20 #> name:([0-9]+.[0-9]*|[0-9]*.[0-9]+)([eE][\\-\\+]?[0-9]+)?;value:99.98;pos:-1;depth:21 #> name:multiplicative_expression;value:;pos:1;depth:15 #> name:multiplicative_expression__63;value:;pos:-1;depth:16 #> name:additive_expression;value:;pos:1;depth:14 #> name:additive_expression__59;value:;pos:-1;depth:15 #> name:equality_expression;value:;pos:1;depth:10 #> name:equality_expression__51;value:;pos:-1;depth:11 #> name:logical_and_expression;value:;pos:1;depth:8 #> name:logical_and_expression__46;value:;pos:-1;depth:9 #> name:selection_statement;value:);pos:3;depth:4 #> name:);value:);pos:-1;depth:5 #> name:selection_statement;value:{ #>     print #> };pos:4;depth:4 #> name:statement;value:{ #>     print #> };pos:-2;depth:5 #> name:statement;value:{ #>     print #> };pos:0;depth:5 #> name:compound_statement;value:{ #>     print #> };pos:-2;depth:6 #> name:compound_statement;value:{;pos:0;depth:6 #> name:{;value:{;pos:-1;depth:7 #> name:compound_statement;value:print #> ;pos:1;depth:6 #> name:compound_statement__6;value:print #> ;pos:-2;depth:7 #> name:compound_statement__6;value:print #> ;pos:0;depth:7 #> name:statement_list;value:print #> ;pos:-2;depth:8 #> name:statement_list;value:print #> ;pos:0;depth:8 #> name:statement_list__3;value:print #> ;pos:-2;depth:9 #> name:statement_list__3;value:print #> ;pos:0;depth:9 #> name:statement_list__2;value:print #> ;pos:-2;depth:10 #> name:statement_list__2;value:print #> ;pos:0;depth:10 #> name:statement;value:print #> ;pos:-2;depth:11 #> name:statement;value:print;pos:0;depth:11 #> name:print_command;value:print;pos:-2;depth:12 #> name:print_command;value:print;pos:0;depth:12 #> name:print;value:print;pos:-1;depth:13 #> name:statement;value:;pos:1;depth:11 #> name:end_statement;value:;pos:-2;depth:12 #> name:end_statement;value:;pos:0;depth:12 #> name:end_statement__36;value:;pos:-1;depth:13 #> name:compound_statement;value:};pos:2;depth:6 #> name:};value:};pos:-1;depth:7 #> name:selection_statement;value:;pos:5;depth:4 #> name:selection_statement__9;value:;pos:-1;depth:5  ## You could use a better R parsing function; You could also use ## this as a starting place for your own C-based parser # }"},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparser-package.html","id":null,"dir":"Reference","previous_headings":"","what":"A Scannerless GLR parser/parser generator — dparser-package","title":"A Scannerless GLR parser/parser generator — dparser-package","text":"package based C dparser https://github.com/jplevyak/dparser","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparser-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Scannerless GLR parser/parser generator — dparser-package","text":"DParser simple powerful tool parsing.  can specify form text parsed using combination regular expressions grammar productions.  parsing technique (technically scannerless GLR parser based Tomita algorithm) restrictions.  grammar can ambiguous, right left recursive, number null productions, separate tokenizer, can include whitespace terminals terminals prefixes terminals.  DParser handles just well formed computer languages data files, just wacky situation occurs real world.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparser-package.html","id":"features","dir":"Reference","previous_headings":"","what":"Features","title":"A Scannerless GLR parser/parser generator — dparser-package","text":"Powerful GLR parsing Simple EBNF-style grammars regular expression terminals Priorities associativities token rules Built-error recovery Speculative actions (semantic disambiguation) Auto-building parse tree (optionally) Final actions go, complete parse tree Tree walkers default actions (multi-pass compilation support) Symbol table built ambiguous parsing Partial parses, recursive parsing, parsing starting non-terminal Whitespace can specified subgrammar External (C call interface) tokenizers external terminal scanners Good asymptotically efficiency Comes ANSI-C, Python Verilog grammars Comes full source Portable C easy compilation linking BSD license, can included application without worrying licensing result natural grammars powerful parsing. R based tree parsing dparse creates dlls fly based C code. default echoing compile disabled, can change options(dparser.echo.compile=FALSE)","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparser-package.html","id":"garbage-collection","dir":"Reference","previous_headings":"","what":"Garbage collection","title":"A Scannerless GLR parser/parser generator — dparser-package","text":"two user options control dlls grammars created dparser deleted upon garbage collection R exit associated active objects.  : dpaser.rm.unnamed.parser.dll: TRUE, remove parsers created strings, memory-based items R. dpaser.rm.unnamed.parser.dll: TRUE, removes parsers created grammar files.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparser-package.html","id":"creating-a-grammar-for-parsing","dir":"Reference","previous_headings":"","what":"Creating a Grammar for Parsing","title":"A Scannerless GLR parser/parser generator — dparser-package","text":"Grammar Comments: Grammars can include C/C++ style comments Example: Grammar Productions: production parts language trying parse tpyically named.  See https://en.wikipedia.org/wiki/Top-down_parsing first production root grammar (trying parse). Productions start non-terminal defined    followed colon ':', set right hand sides separated    '|' () consisting elements (non-terminals terminals). Elements can grouped parens '(', normal regular expression symbols can used ('+' '*' '?' '|'). Elements can grouped parens '(', normal regular expression symbols can used ('+' '*' '?' '|'). Elements can repeated using '@', example elem@3 elem@1:3 repeat 3 1 3 times respectively. Example: Note: Instead using '[' ']' optional elements  use familar consistent '?' operator.  square  brackets reserved speculative actions (). Global C code Grammars: Since main parsing language grammar C, intermixing C code grammar can useful. Global (static) C code can intermixed productions surrounding code brackets '{}'. Example: Note: parsing grammar using mkdparse, option use_r_header = TRUE redefine printf Rprintf better comply R packages. Terminals terminals peices language parsed, like language keywords. Strings terminals surrounded single quotes.  example: Unicode literals can appear strings charaters U+ u+.  example: Priorities Associativity: Priorities can MININT MAXINT specified integers.  Associativity can take values: Token Prioritites Termininal priorities apply set matching strings found terminal(s) highest priority selected. Terminal priorities introduced terminal specifier $term.  saw example token priorities definition ident. Example: Operator Priorities Operator priorities specify priority operator symbol (either terminal non-terminal).  corresponds yacc bison  require global tokenizer, operator priorities associativities specified reduction creates token.  Moreover, associativity includes operator usage well since infered rule context.  Possible operator associativies : Example: Rule Priorities Rule priorities specify priority reduction possible associativies: Rule operator priorities can intermixed interpreted run time (tables built).  make possible user-defined scanners return associativities priorities tokens. Actions: Actions bits code run reduction occurs. Example Speculative Action Speculative actions occur reduction takes place   speculative parsing process.  possible   reduction part final parse   occur different number times.  example: print 'hi' 'ho' given input 'hello dad' time hello reduced, following token known. Final Actions Final actions occur reduction must part   legal final parse (committed).  possible final   actions parsing delay till entire parse tree   constructed (see Options).  Final actions executed   order number according single final unambiguous   parse. input: produce: Embedded Actions Actions can embedded rule. actions executed   replaced synthetic production single   null rule containing actions.  example: input: produce: Note example, print(\"X\") evaluated context null rule context : print evalated context \"B\" subrule appears end subrule therefor treated normal action subrule. Pass Actions DParser supports multiple pass compilation.  passes declared top grammar, actions associated individual rules. Example; pass name colon indicate following action associated particular pass. Passes can either for_all for_undefined (means automatic traversal applies rules without actions defined pass). Furthermore, passes can postorder, preorder, manual (call d_pass ).  Passes can initiated final action rule. Default Actions special production \"_\" can defined single rule   whose actions become default action   specified.  Default actions can specified speculative,   final pass actions apply separately. Example Attributes Action Specifiers language parser can global atrributes actions associated part parsed code. Global State ($g) Global state declared define'ing D_ParseNode_Globals (see ANSI C grammar similar declaration symbols). Global state can accessed action $g.  DParser handles ambiguous parsing global state can accessed different speculative parses.  future automatic splitting global state may implemented (demand). Currently, global state can copied assigned $g ensure changes made effect subsequent speculative parses derived particular parse. Example symbol table (see ) can used manage state information safely different speculative parses. Parse Node State parse node includes set system state variables can set user-defined state variables.  User defined parse node state declared define'ing D_ParseNodeUser. size parse node state must passed new_D_Parser() ensure appropriate amount space allocated parse nodes.   Parse node state accessed :  $# number child nodes $$ user parse node state parent node (non-terminal defined production) $X (X number) user parse node state element X production $n system parse node state rule node $nX system parse node state element X production system parse node state defined dparse.h installed DParser.  contains information symbol, location parsed string, pointers start end parsed string. Misc ${scope} current symbol table scope ${reject} speculative actions permits current parse rejected Symbol Table symbol table can updated different speculative paths sharing bulk data.  defines following functions file (dsymtab.h): 'new_D_Scope' creates new scope 'st' NULL 'top level'   scope.  'enter_D_Scope' returns previous scoping level.  NOTE:   simply assign ${scope} previous scope updated symbol   information lost.  'commit_D_Scope' can used final   actions compress update list top level scope   improve efficiency. 'find_D_Sym' finds current version symbol given   scope.  'UPDATE_D_SYM' updates value symbol (creates   difference record current speculative parse path).   'current_D_Sym' used retrive current version symbol,   pointer may stored attribute   variable.  Symbols name created   scope.  function 'find_D_Sym_in_Scope' provided detect   case. User data can attached symbols define'ing D_UserSym.  See ANSI C grammar example. full example scope usage (tests/g29.test.g): Whitespace Whitespace can specified two ways: C function can    user-defined, subgrammar.  default whitespace parser    compatible C/C++ #line directives comments.  can    replaced user specified function parsing option (see    Options). Additionally, (optionally) reserved production whitespace    defined, subgrammar defines used consume whitespace    main grammar.  subgrammar can include normal actions. Example Whitespace can accessed per parse node basis using unctions: d_ws_before d_ws_after, return tart whitespace start_loc.s end respectively. Ambiguities Ambiguities resolved automatically based priorities    associativities.  addition, resolution techniques    fail, user defined ambiguity resolution possible.  default    ambiguity handler produces fatal error unresolved ambiguity.    behavior can replaced user defined resolvers    signature provided dparse.h. verbose_level flag set, default ambiguity andler print parenthesized versions ambiguous parse rees.  may assistence disambiguating grammar. Error Recovery DParser implements error recovery scheme appropriate scannerless parsers.  time investigate prior work area, sure novel.  Suffice now optional works well C/C++ like grammars. Parsing Options Parser instantiated function new_D_Parser.     resulting data structure contains number user configurable    options (see dparser.h).  provided reasonable default    values include: initial_globals - initial global variables accessable $g initial_skip_space_fn - initial whitespace function initial_scope - initial symbol table scope syntax_error_fn - function called syntax error ambiguity_fn - function called unresolved ambiguity loc - initial location (set error). addtion, following user configurables: sizeof_user_parse_node - sizeof D_ParseNodeUser save_parse_tree - whether parse tree save final actions executed dont_fixup_internal_productions - convert Kleene star variable number children tree reductions dont_merge_epsilon_trees - automatically remove ambiguities result trees epsilon reductions without actions dont_use_greediness_for_disambiguation - use rule longest parse reduces token used disambiguate parses.  rule used handle case (else?) relatively cleanly. dont_use_height_for_disambiguation - use rule least deep parse reduces token used disabiguate parses.  rule used handle recursive grammars relatiively cleanly. dont_compare_stacks - disables comparing stacks handle certain exponential cases ambiguous operator priority resolution. commit_actions_interval - often commit final actions (0 immediate, MAXINT essentially till end parsing) error_recovery - whether use error recovery (defaults ) following result values: syntax_errors - many syntax errors (error_recovery      ) final value checked see parse successful.","code":"// My first grammar E: E '+' E | \"[abc]\"; /* is this right? */ program: statements+ |  comment* (function |  procedure)?; { void dr_s() { printf(\"Dr. S\\n\"); }    S: 'the' 'cat' 'and' 'the' 'hat' { dr_s(); } | T;    { void twain() { printf(\"Mark Twain\\n\"); }        T: 'Huck' 'Finn' { twain(); }; block: '{' statements* '}'; whileblock: 'while' '(' expression ')' block; U+03c9 { printf(\"omega\\n\"); } assoc : '$unary_op_right' | '$unary_op_left' | '$binary_op_right' | '$binary_op_left' | '$unary_right' | '$unary_left' | '$binary_right' | '$binary_left' | '$right' | '$left' ; S : 'if' '(' S ')' S ';' | 'do' S 'while' '(' S ')' ';' | ident; ident: \"[a-z]+\" $term -1; operator_assoc : '$unary_op_right' | '$unary_op_left' | '$binary_op_right'                     | '$binary_op_left' | '$unary_right' | '$unary_left'                     | '$binary_right' | '$binary_left'; E: ident op ident; ident: '[a-z]+'; op: '*' $binary_op_left 2 |     '+' $binary_op_left 1; rule_assoc: '$right' | '$left'; S: this | that;  this: 'this' { printf(\"got this\\n\"); };  that: 'that' { printf(\"got that\\n\"); }; S: this | that; this: hi 'mom'; that: ho 'dad'; ho: 'hello' [ printf(\"ho\\n\"); ]; hi: 'hello' [ printf(\"hi\\n\"); ]; S: A S 'b' | 'x';  A: [ printf(\"speculative e-reduce A\\n\"); ]     { printf(\"final e-reduce A\\n\"); }; xbbb speculative e-reduce A  final e-reduce A  final e-reduce A  final e-reduce A S: A { printf(\"X\"); } B;  A: 'a' { printf(\"a\"); };  B: 'b' { printf(\"b\"); }; ab aXb S: A (A B { printf(\"X\"); }) B; ${pass sym for_all postorder}  ${pass gen for_all postorder}   translation_unit: statement*;   statement    : expression ';' {      d_pass(${parser}, &$n, ${pass sym});      d_pass(${parser}, &$n, ${pass gen});    }    ;   expression :  integer    gen: { printf(\"gen integer\\n\"); }    sym: { printf(\"sym integer\\n\"); }    | expression '+' expression $right 2    sym: { printf(\"sym +\\n\"); }    ; _: { printf(\"final action\"); }      gen: { printf(\"default gen action\"); }      sym: { printf(\"default sym action\"); }      ; [ $g = copy_globals($g);   $g->my_variable = 1;   ] struct D_Scope *new_D_Scope(struct D_Scope *st);   struct D_Scope *enter_D_Scope(struct D_Scope *current, struct D_Scope *scope);   D_Sym *NEW_D_SYM(struct D_Scope *st, char *name, char *end);   D_Sym *find_D_Sym(struct D_Scope *st, char *name, char *end);   D_Sym *UPDATE_D_SYM(struct D_Scope *st, D_Sym *sym);   D_Sym *current_D_Sym(struct D_Scope *st, D_Sym *sym);   D_Sym *find_D_Sym_in_Scope(struct D_Scope *st, char *name, char *end); #include <stdio.h>    typedef struct My_Sym {     int value;   } My_Sym;   #define D_UserSym My_Sym   typedef struct My_ParseNode {     int value;     struct D_Scope *scope;   } My_ParseNode;   #define D_ParseNode_User My_ParseNode }  ranslation_unit: statement*;  tatement : expression ';' { printf(\" | '{' new_scope statement* '}' [ ${scope} = enter_D_Scope(${scope}, $n0.scope); ] { ${scope} = commit_D_Scope(${scope}); } ;  ew_scope: [ ${scope} = new_D_Scope(${scope}); ];  xpression : identifier ':' expression [ _Sym *s; f (find_D_Sym_in_Scope(${scope}, $n0.start_loc.s, $n0.end)) rintf(\"duplicate identifier line   = NEW_D_SYM(${scope}, $n0.start_loc.s, $n0.end); ->user.value = $2.value; $.value = s->user.value; ] | identifier '=' expression [ D_Sym *s = find_D_Sym(${scope}, $n0.start_loc.s, $n0.end);  = UPDATE_D_SYM(${scope}, s); ->user.value = $2.value; $.value = s->user.value; ] | integer [ $$.value = atoi($n0.start_loc.s); ] | identifier [ D_Sym *s = find_D_Sym(${scope}, $n0.start_loc.s, $n0.end); f (s) $.value = s->user.value; ] | expression '+' expression [ $$.value = $0.value + $1.value; ] ;  nteger: \"-?([0-9]|0(x|X))[0-9]*(u|U|b|B|w|W|L|l)*\" $term -1; dentifier: \"[a-zA-Z_][a-zA-Z_0-9]*\"; : 'a' 'b' 'c'; hitespace: \"[ \\t\\n]*\";"},{"path":[]},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparser-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A Scannerless GLR parser/parser generator — dparser-package","text":"Maintainer: Matthew Fidler matthew.fidler@gmail.com Authors: John Plevyak jplevyak@gmail.com [copyright holder]","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparserFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A S4 class for dparser functions — dparserFunction-class","title":"A S4 class for dparser functions — dparserFunction-class","text":"data function called.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/dparserFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A S4 class for dparser functions — dparserFunction-class","text":"env contains environment grammar name dll files stored. .Data function data","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/gc.dparser.html","id":null,"dir":"Reference","previous_headings":"","what":"Garbage collection for dpaser functions — gc.dparser","title":"Garbage collection for dpaser functions — gc.dparser","text":"delete dynamically created dll upon garbage collection.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/gc.dparser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Garbage collection for dpaser functions — gc.dparser","text":"","code":"gc.dparser(env)"},{"path":"https://nlmixr2.github.io/dparser-R/reference/gc.dparser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Garbage collection for dpaser functions — gc.dparser","text":"env Environment garbage collected.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/gc.dparser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Garbage collection for dpaser functions — gc.dparser","text":"Nothing.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/gc.dparser.html","id":"garbage-collection","dir":"Reference","previous_headings":"","what":"Garbage collection","title":"Garbage collection for dpaser functions — gc.dparser","text":"two user options control dlls grammars created dparser deleted upon garbage collection R exit associated active objects.  : dpaser.rm.unnamed.parser.dll: TRUE, remove parsers created strings, memory-based items R. dpaser.rm.unnamed.parser.dll: TRUE, removes parsers created grammar files.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/gc.dparser.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Garbage collection for dpaser functions — gc.dparser","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":null,"dir":"Reference","previous_headings":"","what":"mkdparse dparser grammer c — mkdparse","title":"mkdparse dparser grammer c — mkdparse","text":"Make dparser c file based grammer","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mkdparse dparser grammer c — mkdparse","text":"","code":"mkdparse(   file,   outputFile,   set_op_priority_from_rule = FALSE,   right_recursive_BNF = FALSE,   states_for_whitespace = TRUE,   states_for_all_nterms = FALSE,   tokenizer = FALSE,   token_type = c(\"#define\", \"enum\"),   longest_match = FALSE,   grammar_ident = \"gram\",   ident_from_filename = FALSE,   scanner_blocks = 4,   write_line_directives = TRUE,   write_header = c(\"IfEmpty\", TRUE, FALSE),   rdebug = FALSE,   verbose = FALSE,   write_extension = \"c\",   use_r_header = TRUE )"},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mkdparse dparser grammer c — mkdparse","text":"file File name grammer parse. outputFile Output file name.  Can directory.  , file name determined input file. set_op_priority_from_rule Toggle setting operator priority rules.  Setting operator priorities operator tokens can increase size tables can permit unnecessary parse stacks pruned earlier. (FALSE default) right_recursive_BNF Toggle use right recursion EBNF productions.  change unless really know . (FALSE default) states_for_whitespace Toggle computing whitespace states. 'whitespace' defined grammar, use subparser consume whitespace. (TRUE default) states_for_all_nterms Toggle computing states non-terminals.  Ensures unique state non-terminal subparsers can invoked non-terminal. (FALSE default) tokenizer Toggle building tokenizer START.  TRUE, instead generating unique scanner state (.e. 'scannerless' parser), generate single scanner (tokenizer) entire grammar.  provides easy way build grammars languages assume tokenizer (e.g. ANSI C). (FALSE default) token_type Token type \"#define\" \"enum\" longest_match Toggle longest match lexical ambiguity resolution.  TRUE scanner recognizing longest matching tokens given state. provides easy way build grammars languages use longest match lexical ambiguity resolution (e.g. ANSI-C, C++). (FALSE default) grammar_ident Tag grammar data structures multiple sets tables can included one file/application. (defaults 'gram') ident_from_filename Build grammer tag file-name. scanner_blocks Number blocks scanner tables broken . Larger numbers permit sharing overhead.  4 seems optimal grammars. (defaults 4) files. write_line_directives Toggle writing line numbers.  Used debug parsing table generator . (TRUE default) write_header Write header, FALSE : , TRUE : yes, \"IfEmpty\" : empty. rdebug Replace actions grammar actions printing productions, 1 : speculative parsing process (<-), 2 : reduction part legal final parse (<=), 3 : , 4 : remove actions grammar. Print changed grammar console.  Useful debugging prototyping new, experimental grammars. verbose Increase verbosity. write_extension Set extension generated code file.  C++ programs (example) extension can set .cpp option write_extension=\"cpp\". (write_extension=\"c\" default) use_r_header TRUE, add R headers swap printf Rprintf. default TRUE.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mkdparse dparser grammer c — mkdparse","text":"Nothing. Outputs files instead.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mkdparse dparser grammer c — mkdparse","text":"Uses grammer file create c file parsing. mkdparser scannerless GLR parser generator based  Tomita algorithm. self-hosted easy  use. Grammars written natural style EBNF regular  expressions support speculative final actions.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":"creating-a-grammar-for-parsing","dir":"Reference","previous_headings":"","what":"Creating a Grammar for Parsing","title":"mkdparse dparser grammer c — mkdparse","text":"Grammar Comments: Grammars can include C/C++ style comments Example: Grammar Productions: production parts language trying parse tpyically named.  See https://en.wikipedia.org/wiki/Top-down_parsing first production root grammar (trying parse). Productions start non-terminal defined    followed colon ':', set right hand sides separated    '|' () consisting elements (non-terminals terminals). Elements can grouped parens '(', normal regular expression symbols can used ('+' '*' '?' '|'). Elements can grouped parens '(', normal regular expression symbols can used ('+' '*' '?' '|'). Elements can repeated using '@', example elem@3 elem@1:3 repeat 3 1 3 times respectively. Example: Note: Instead using '[' ']' optional elements  use familar consistent '?' operator.  square  brackets reserved speculative actions (). Global C code Grammars: Since main parsing language grammar C, intermixing C code grammar can useful. Global (static) C code can intermixed productions surrounding code brackets '{}'. Example: Note: parsing grammar using mkdparse, option use_r_header = TRUE redefine printf Rprintf better comply R packages. Terminals terminals peices language parsed, like language keywords. Strings terminals surrounded single quotes.  example: Unicode literals can appear strings charaters U+ u+.  example: Priorities Associativity: Priorities can MININT MAXINT specified integers.  Associativity can take values: Token Prioritites Termininal priorities apply set matching strings found terminal(s) highest priority selected. Terminal priorities introduced terminal specifier $term.  saw example token priorities definition ident. Example: Operator Priorities Operator priorities specify priority operator symbol (either terminal non-terminal).  corresponds yacc bison  require global tokenizer, operator priorities associativities specified reduction creates token.  Moreover, associativity includes operator usage well since infered rule context.  Possible operator associativies : Example: Rule Priorities Rule priorities specify priority reduction possible associativies: Rule operator priorities can intermixed interpreted run time (tables built).  make possible user-defined scanners return associativities priorities tokens. Actions: Actions bits code run reduction occurs. Example Speculative Action Speculative actions occur reduction takes place   speculative parsing process.  possible   reduction part final parse   occur different number times.  example: print 'hi' 'ho' given input 'hello dad' time hello reduced, following token known. Final Actions Final actions occur reduction must part   legal final parse (committed).  possible final   actions parsing delay till entire parse tree   constructed (see Options).  Final actions executed   order number according single final unambiguous   parse. input: produce: Embedded Actions Actions can embedded rule. actions executed   replaced synthetic production single   null rule containing actions.  example: input: produce: Note example, print(\"X\") evaluated context null rule context : print evalated context \"B\" subrule appears end subrule therefor treated normal action subrule. Pass Actions DParser supports multiple pass compilation.  passes declared top grammar, actions associated individual rules. Example; pass name colon indicate following action associated particular pass. Passes can either for_all for_undefined (means automatic traversal applies rules without actions defined pass). Furthermore, passes can postorder, preorder, manual (call d_pass ).  Passes can initiated final action rule. Default Actions special production \"_\" can defined single rule   whose actions become default action   specified.  Default actions can specified speculative,   final pass actions apply separately. Example Attributes Action Specifiers language parser can global atrributes actions associated part parsed code. Global State ($g) Global state declared define'ing D_ParseNode_Globals (see ANSI C grammar similar declaration symbols). Global state can accessed action $g.  DParser handles ambiguous parsing global state can accessed different speculative parses.  future automatic splitting global state may implemented (demand). Currently, global state can copied assigned $g ensure changes made effect subsequent speculative parses derived particular parse. Example symbol table (see ) can used manage state information safely different speculative parses. Parse Node State parse node includes set system state variables can set user-defined state variables.  User defined parse node state declared define'ing D_ParseNodeUser. size parse node state must passed new_D_Parser() ensure appropriate amount space allocated parse nodes.   Parse node state accessed :  $# number child nodes $$ user parse node state parent node (non-terminal defined production) $X (X number) user parse node state element X production $n system parse node state rule node $nX system parse node state element X production system parse node state defined dparse.h installed DParser.  contains information symbol, location parsed string, pointers start end parsed string. Misc ${scope} current symbol table scope ${reject} speculative actions permits current parse rejected Symbol Table symbol table can updated different speculative paths sharing bulk data.  defines following functions file (dsymtab.h): 'new_D_Scope' creates new scope 'st' NULL 'top level'   scope.  'enter_D_Scope' returns previous scoping level.  NOTE:   simply assign ${scope} previous scope updated symbol   information lost.  'commit_D_Scope' can used final   actions compress update list top level scope   improve efficiency. 'find_D_Sym' finds current version symbol given   scope.  'UPDATE_D_SYM' updates value symbol (creates   difference record current speculative parse path).   'current_D_Sym' used retrive current version symbol,   pointer may stored attribute   variable.  Symbols name created   scope.  function 'find_D_Sym_in_Scope' provided detect   case. User data can attached symbols define'ing D_UserSym.  See ANSI C grammar example. full example scope usage (tests/g29.test.g): Whitespace Whitespace can specified two ways: C function can    user-defined, subgrammar.  default whitespace parser    compatible C/C++ #line directives comments.  can    replaced user specified function parsing option (see    Options). Additionally, (optionally) reserved production whitespace    defined, subgrammar defines used consume whitespace    main grammar.  subgrammar can include normal actions. Example Whitespace can accessed per parse node basis using unctions: d_ws_before d_ws_after, return tart whitespace start_loc.s end respectively. Ambiguities Ambiguities resolved automatically based priorities    associativities.  addition, resolution techniques    fail, user defined ambiguity resolution possible.  default    ambiguity handler produces fatal error unresolved ambiguity.    behavior can replaced user defined resolvers    signature provided dparse.h. verbose_level flag set, default ambiguity andler print parenthesized versions ambiguous parse rees.  may assistence disambiguating grammar. Error Recovery DParser implements error recovery scheme appropriate scannerless parsers.  time investigate prior work area, sure novel.  Suffice now optional works well C/C++ like grammars. Parsing Options Parser instantiated function new_D_Parser.     resulting data structure contains number user configurable    options (see dparser.h).  provided reasonable default    values include: initial_globals - initial global variables accessable $g initial_skip_space_fn - initial whitespace function initial_scope - initial symbol table scope syntax_error_fn - function called syntax error ambiguity_fn - function called unresolved ambiguity loc - initial location (set error). addtion, following user configurables: sizeof_user_parse_node - sizeof D_ParseNodeUser save_parse_tree - whether parse tree save final actions executed dont_fixup_internal_productions - convert Kleene star variable number children tree reductions dont_merge_epsilon_trees - automatically remove ambiguities result trees epsilon reductions without actions dont_use_greediness_for_disambiguation - use rule longest parse reduces token used disambiguate parses.  rule used handle case (else?) relatively cleanly. dont_use_height_for_disambiguation - use rule least deep parse reduces token used disabiguate parses.  rule used handle recursive grammars relatiively cleanly. dont_compare_stacks - disables comparing stacks handle certain exponential cases ambiguous operator priority resolution. commit_actions_interval - often commit final actions (0 immediate, MAXINT essentially till end parsing) error_recovery - whether use error recovery (defaults ) following result values: syntax_errors - many syntax errors (error_recovery      ) final value checked see parse successful.","code":"// My first grammar E: E '+' E | \"[abc]\"; /* is this right? */ program: statements+ |  comment* (function |  procedure)?; { void dr_s() { printf(\"Dr. S\\n\"); }    S: 'the' 'cat' 'and' 'the' 'hat' { dr_s(); } | T;    { void twain() { printf(\"Mark Twain\\n\"); }        T: 'Huck' 'Finn' { twain(); }; block: '{' statements* '}'; whileblock: 'while' '(' expression ')' block; U+03c9 { printf(\"omega\\n\"); } assoc : '$unary_op_right' | '$unary_op_left' | '$binary_op_right' | '$binary_op_left' | '$unary_right' | '$unary_left' | '$binary_right' | '$binary_left' | '$right' | '$left' ; S : 'if' '(' S ')' S ';' | 'do' S 'while' '(' S ')' ';' | ident; ident: \"[a-z]+\" $term -1; operator_assoc : '$unary_op_right' | '$unary_op_left' | '$binary_op_right'                     | '$binary_op_left' | '$unary_right' | '$unary_left'                     | '$binary_right' | '$binary_left'; E: ident op ident; ident: '[a-z]+'; op: '*' $binary_op_left 2 |     '+' $binary_op_left 1; rule_assoc: '$right' | '$left'; S: this | that;  this: 'this' { printf(\"got this\\n\"); };  that: 'that' { printf(\"got that\\n\"); }; S: this | that; this: hi 'mom'; that: ho 'dad'; ho: 'hello' [ printf(\"ho\\n\"); ]; hi: 'hello' [ printf(\"hi\\n\"); ]; S: A S 'b' | 'x';  A: [ printf(\"speculative e-reduce A\\n\"); ]     { printf(\"final e-reduce A\\n\"); }; xbbb speculative e-reduce A  final e-reduce A  final e-reduce A  final e-reduce A S: A { printf(\"X\"); } B;  A: 'a' { printf(\"a\"); };  B: 'b' { printf(\"b\"); }; ab aXb S: A (A B { printf(\"X\"); }) B; ${pass sym for_all postorder}  ${pass gen for_all postorder}   translation_unit: statement*;   statement    : expression ';' {      d_pass(${parser}, &$n, ${pass sym});      d_pass(${parser}, &$n, ${pass gen});    }    ;   expression :  integer    gen: { printf(\"gen integer\\n\"); }    sym: { printf(\"sym integer\\n\"); }    | expression '+' expression $right 2    sym: { printf(\"sym +\\n\"); }    ; _: { printf(\"final action\"); }      gen: { printf(\"default gen action\"); }      sym: { printf(\"default sym action\"); }      ; [ $g = copy_globals($g);   $g->my_variable = 1;   ] struct D_Scope *new_D_Scope(struct D_Scope *st);   struct D_Scope *enter_D_Scope(struct D_Scope *current, struct D_Scope *scope);   D_Sym *NEW_D_SYM(struct D_Scope *st, char *name, char *end);   D_Sym *find_D_Sym(struct D_Scope *st, char *name, char *end);   D_Sym *UPDATE_D_SYM(struct D_Scope *st, D_Sym *sym);   D_Sym *current_D_Sym(struct D_Scope *st, D_Sym *sym);   D_Sym *find_D_Sym_in_Scope(struct D_Scope *st, char *name, char *end); #include <stdio.h>    typedef struct My_Sym {     int value;   } My_Sym;   #define D_UserSym My_Sym   typedef struct My_ParseNode {     int value;     struct D_Scope *scope;   } My_ParseNode;   #define D_ParseNode_User My_ParseNode }  ranslation_unit: statement*;  tatement : expression ';' { printf(\" | '{' new_scope statement* '}' [ ${scope} = enter_D_Scope(${scope}, $n0.scope); ] { ${scope} = commit_D_Scope(${scope}); } ;  ew_scope: [ ${scope} = new_D_Scope(${scope}); ];  xpression : identifier ':' expression [ _Sym *s; f (find_D_Sym_in_Scope(${scope}, $n0.start_loc.s, $n0.end)) rintf(\"duplicate identifier line   = NEW_D_SYM(${scope}, $n0.start_loc.s, $n0.end); ->user.value = $2.value; $.value = s->user.value; ] | identifier '=' expression [ D_Sym *s = find_D_Sym(${scope}, $n0.start_loc.s, $n0.end);  = UPDATE_D_SYM(${scope}, s); ->user.value = $2.value; $.value = s->user.value; ] | integer [ $$.value = atoi($n0.start_loc.s); ] | identifier [ D_Sym *s = find_D_Sym(${scope}, $n0.start_loc.s, $n0.end); f (s) $.value = s->user.value; ] | expression '+' expression [ $$.value = $0.value + $1.value; ] ;  nteger: \"-?([0-9]|0(x|X))[0-9]*(u|U|b|B|w|W|L|l)*\" $term -1; dentifier: \"[a-zA-Z_][a-zA-Z_0-9]*\"; : 'a' 'b' 'c'; hitespace: \"[ \\t\\n]*\";"},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mkdparse dparser grammer c — mkdparse","text":"Matthew L. Fidler R interface, John Plevyak     dparser","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/mkdparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mkdparse dparser grammer c — mkdparse","text":"","code":"## This makes the ANSI c grammar file to parse C code: mkdparse(system.file(\"ansic.test.g\", package = \"dparser\"),         file.path(tempdir(), \"ansic_gram.c\"),          grammar_ident=\"ascii_C\")"},{"path":"https://nlmixr2.github.io/dparser-R/reference/show-dparserFunction-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the s4 object — show,dparserFunction-method","title":"Print the s4 object — show,dparserFunction-method","text":"Print s4 object","code":""},{"path":"https://nlmixr2.github.io/dparser-R/reference/show-dparserFunction-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the s4 object — show,dparserFunction-method","text":"","code":"# S4 method for class 'dparserFunction' show(object)"},{"path":"https://nlmixr2.github.io/dparser-R/reference/show-dparserFunction-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the s4 object — show,dparserFunction-method","text":"object dparserFunction print.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-12","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-12","title":"dparser 1.3.1-12","text":"Changed language access use SET_TYPEOF (required CRAN) Changed interface functional changes cause segmentation faults libraries recompiled library (removed binary linkage). However changes dparser parsing C structures likely cause segmentation fault. Since structures changed much time, CRAN requests small changes functions frequently, probably sufficient cases.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-11","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-11","title":"dparser 1.3.1-11","text":"CRAN release: 2023-12-07 Changed gram.c handle NULL strings without printing (requested CRAN) Changed util.c avoid security warnings error/warnings R (requested CRAN) Parsing errors dparser() evaluation now give line number error.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-10","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-10","title":"dparser 1.3.1-10","text":"CRAN release: 2023-03-16 added dparser2.h declares functions instead defines .","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-9","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-9","title":"dparser 1.3.1-9","text":"CRAN release: 2022-11-10 Initialized version string zero length string fix valgrind issues Change flags suppress false positive memory leaks (might lost errors)","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-8","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-8","title":"dparser 1.3.1-8","text":"CRAN release: 2022-10-29 Removed sprintf indicated new Mac M1 checks rxode2.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-7","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-7","title":"dparser 1.3.1-7","text":"CRAN release: 2022-10-09 Fixed one remaining strict typing issue, requested CRAN.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-6","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-6","title":"dparser 1.3.1-6","text":"CRAN release: 2022-10-05 Updated dparser header strict typing, requested CRAN.","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-4","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-4","title":"dparser 1.3.1-4","text":"CRAN release: 2021-04-07 Updated dparser explicitly include R headers generated grammars (requested), fix fedora problem","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-3","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-3","title":"dparser 1.3.1-3","text":"CRAN release: 2021-04-06 Updated R dparser use system() instead .call(\"system\",...) Changed default compile show stderr stdout","code":""},{"path":"https://nlmixr2.github.io/dparser-R/news/index.html","id":"dparser-131-2","dir":"Changelog","previous_headings":"","what":"dparser 1.3.1-2","title":"dparser 1.3.1-2","text":"CRAN release: 2021-04-03 Updated R dparser use recent version dparser Applied custom changes fix un-sanitized behavior Added NEWS.md file track changes package.","code":""}]
